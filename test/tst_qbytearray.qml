import QtQuick 2.0
import QtTest 1.2

import "../package/contents/code/qByteArray.mjs" as Q

TestCase {
    name: "QByteTests"

    function test_parseBytes() {
        const string = "[00 00 00 06 00 31 00 32 00 33]"
        const result = new Uint8Array([0x0, 0x0, 0x0, 0x06, 0x0, 0x31, 0x0, 0x32, 0x0, 0x33])
        compare(Q.parseBytes(string), result)
    }

    function test_bytesToString() {
        const bytes = new Uint8Array([0x0, 0x74, 0x02, 0x58, 0x0, 0x73, 0x0, 0x74])
        const string = "tɘst"
        compare(Q.bytesToString(bytes), string)
    }

    function test_stringToBytes() {
        const string = "tɘst"
        const bytes = new Uint8Array([0x0, 0x74, 0x02, 0x58, 0x0, 0x73, 0x0, 0x74])
        compare(Q.stringToBytes(string), bytes)
    }

    function test_mapToQBytes() {
        const map = { a: 1, b: true }
        const bytes = new Uint8Array([0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x2, 0x0, 0x61, 0x0, 0x0, 0x0, 0x2, 0x0, 0x31, 0x0, 0x0, 0x0, 0x2, 0x0, 0x62, 0x0, 0x0, 0x0, 0x8, 0x0, 0x74, 0x0, 0x72, 0x0, 0x75, 0x0, 0x65])
        compare(Q.mapToQBytes(map), bytes)
    }

    function test_qBytesToMap() {
        const map = { a: "1", b: "true" }
        const bytes = new Uint8Array([0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x2, 0x0, 0x61, 0x0, 0x0, 0x0, 0x2, 0x0, 0x31, 0x0, 0x0, 0x0, 0x2, 0x0, 0x62, 0x0, 0x0, 0x0, 0x8, 0x0, 0x74, 0x0, 0x72, 0x0, 0x75, 0x0, 0x65])
        compare(Q.qBytesToMap(bytes), map)
    }

    function test_stringToQBytes() {
        const string = "tɘst"
        const bytes = new Uint8Array([0x0, 0x0, 0x0, 0x8, 0x0, 0x74, 0x02, 0x58, 0x0, 0x73, 0x0, 0x74])
        compare(Q.stringToQBytes(string), bytes)
    }

    function test_qBytesToString() {
        const string = "tɘst"
        const bytes = new Uint8Array([0x0, 0x0, 0x0, 0x8, 0x0, 0x74, 0x02, 0x58, 0x0, 0x73, 0x0, 0x74])
        compare(Q.qBytesToString(bytes), string)
    }

    function test_parseEntryList() {
        const listStr = '      123456789      987654321@123456789'
        const entryList = ['123456789', '987654321@123456789']
        compare(Q.parseEntryList(listStr), entryList)
    }
    
}